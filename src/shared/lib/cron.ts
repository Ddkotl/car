import cron from "node-cron";
import { createBackup } from "./backups/db/db_backup";
import { createMinioBackup } from "./backups/s3/s3_backup";
import { cleanupOldDBBackups } from "./backups/db/db_cleen";
import { cleanupOldMinioBackups } from "./backups/s3/s3_cleen";
import { StartParse } from "@/features/parsing";

function setupCron() {
  console.log("‚è≥ Cron –∑–∞–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã...");

  cron.schedule("0 10 * * *", async () => {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...");
    try {
      await StartParse();
      console.log("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:", error);
    }
  });

  cron.schedule("0 1 2 * *", async () => {
    console.log("üìÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞...");
    try {
      await createBackup();
      await createMinioBackup();
      await cleanupOldDBBackups();
      await cleanupOldMinioBackups();
      console.log("‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω.");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞:", error);
    }
  });
}

setupCron();
